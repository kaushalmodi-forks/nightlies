language: c

os:
  - windows
  - linux
  - osx

env:
  - NIMBRANCH=devel ARCH=32
  - NIMBRANCH=devel ARCH=64
  - NIMBRANCH=version-0-19 ARCH=32
  - NIMBRANCH=version-0-19 ARCH=64

matrix:
  exclude:
    - os: linux
      env: NIMBRANCH=devel ARCH=32
    - os: linux
      env: NIMBRANCH=version-0-19 ARCH=32
    - os: osx
      env: NIMBRANCH=devel ARCH=32
    - os: osx
      env: NIMBRANCH=version-0-19 ARCH=32

branches:
  only:
    # Prevent building the auto tagged "untagged-*" commits.
    # https://docs.travis-ci.com/user/customizing-the-build/#safelisting-or-blocklisting-branches
    - master

addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libsdl1.2-dev
      - libgc-dev
      - libsfml-dev

before_cache:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]
    then
      brew cleanup
    fi

cache:
  directories:
    - $TRAVIS_BUILD_DIR/nim
    - $TRAVIS_BUILD_DIR/mingw
    - $HOME/Library/Caches/Homebrew

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]
    then
      brew update
      brew install boehmgc
      brew install sfml
      brew install gnu-tar
    fi
  - set -e
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]
    then
      unset -f cd
      shell_session_update() { :; }
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]
    then
      if [[ ! -d "${TRAVIS_BUILD_DIR}/mingw/mingw${ARCH}" ]]
      then
        wget -nv "https://nim-lang.org/download/mingw${ARCH}-6.3.0.7z"
        7z x -y "mingw${ARCH}-6.3.0.7z" -o"${TRAVIS_BUILD_DIR}/mingw" > nul
      fi
      export PATH="${TRAVIS_BUILD_DIR}/mingw/mingw${ARCH}/bin:${PATH}"
    fi

install:
  - export NIMREPO="https://github.com/nim-lang/Nim"
  - export NIMVER="$(git ls-remote ${NIMREPO} ${NIMBRANCH} | cut -f 1)"
  - export NIMDIR="${TRAVIS_BUILD_DIR}/nim/${NIMVER}"
  - echo "NIMDIR = ${NIMDIR}"
  - |
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]
    then
      export NIMEXE="${NIMDIR}/bin/nim.exe"
    else
      export NIMEXE="${NIMDIR}/bin/nim"
    fi
  - |
    if [[ ! -f "${NIMEXE}" ]]
    then
      export DO_DEPLOY=yes && echo "DO_DEPLOY = ${DO_DEPLOY}"
      rm -rf nim
      mkdir -p nim
      git clone --single-branch --branch "${NIMBRANCH}" --depth=1 "${NIMREPO}" "${NIMDIR}"
      cd "${NIMDIR}" || exit
      [ -d csources ] || git clone --depth 1 https://github.com/nim-lang/csources.git
      cd csources || exit
      echo "[phase 0] Building csources"
      if [[ "$TRAVIS_OS_NAME" == "windows" ]]
      then
        cmd "/C build.bat"
        wget -nv https://nim-lang.org/download/dlls.zip
        7z x -y "dlls.zip" -o"../bin" > nul
        rm -rf dlls.zip
      else
        sh build.sh
      fi
      cd ..
      echo "[phase 1] Building koch"
      ./bin/nim c koch
      echo "[phase 2] Building nim"
      ./koch boot -d:release
      export PATH="${NIMDIR}/bin:${PATH}"
      if [[ "$TRAVIS_OS_NAME" == "windows" ]]
      then
        echo "[phase 3] Running tools/winrelease"
        ./bin/nim c tools/winrelease
        mkdir -p web/upload/download
        cp tools/winrelease.exe .
        ./winrelease
      else
        echo "[phase 3] Running koch doc0"
        ./koch doc
        echo "[phase 4] Running koch csource"
        ./koch csource -d:release
        echo "[phase 5] Running koch xz"
        ./koch xz -d:release
        echo "[phase 6] Running koch testinstall"
        ./koch testinstall
      fi
      # After building nim, wipe csources to save on cache space.
      rm -rf csources
    fi
  # Ensure that NIMVERSHORT and PATH env vars are set whether or not
  # cached nim build is used.
  - cd "${NIMDIR}" && export NIMVERSHORT="$(git log --format=%h -1)"
  - export PATH="${NIMDIR}/bin:${PATH}"
  - |
    if [[ ! -z "${DO_DEPLOY+x}" ]]
    then
      echo "[cache check] New Nim commit found"
    else
      echo "[cache check] No new Nim commit"
    fi

script:
  - echo "[In script block]"
  - nim --version

before_deploy:
  - cd "${TRAVIS_BUILD_DIR}"
  - export DEPLOY_VERSION="$(nim --version | head -n 1 | perl -pe 's/.*Version ([0-9.]+).*/\1/')"
  - |
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]
    then
      export ZIPSUFFIX="_x${ARCH}.zip"
    else
      export ZIPSUFFIX=".tar.xz"
    fi

  - export ASSETFILE="nim-${DEPLOY_VERSION}-${TRAVIS_OS_NAME}${ZIPSUFFIX}"
  - |
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]
    then
      cp -f "${NIMDIR}/web/upload/download/nim-${DEPLOY_VERSION}${ZIPSUFFIX}" "${ASSETFILE}"
    else
      cp -f "${NIMDIR}/build/nim-${DEPLOY_VERSION}${ZIPSUFFIX}" "${ASSETFILE}"
    fi

  - git config --local user.name "${GIT_TAG_USER_NAME}"
  - git config --local user.email "${GIT_TAG_USER_EMAIL}"
  - export TRAVIS_TAG="v${DEPLOY_VERSION}-${NIMVERSHORT}"
  - git tag "${TRAVIS_TAG}" || echo "${TRAVIS_TAG} already exists"

  - echo "[phase n-1] The deploy will start now .."

deploy:
  provider: releases
  api_key: "${GITHUB_OAUTH_TOKEN}"
  file: "${ASSETFILE}"
  name: "v${DEPLOY_VERSION}-${NIMVERSHORT} nightly build"
  body: >-
    This nightly release was built on $(date +'%Y-%m-%d') using https://github.com/nim-lang/Nim/tree/${NIMVER}.
    The Windows zips contain platform specific binaries whereas the the Linux and OSX archives contain
    pre-packaged source that can be used to build Nim on Linux, OSX and even Windows.

  skip_cleanup: true
  on:
    condition: "! -z ${DO_DEPLOY+x}"
    tags: false

notifications:
  email:
    on_success: never # default: change
    on_failure: always # default: always
